Dev Plan:
 - Create Vector, Tensor Classes
     - Write definitions + test all methods... see that they're working

 - Create Particle Classes
    - Write definitions + Test methods.
    - Generate neighbor list (Might need to make a list type object)
    - Test that particles work using a simple 3x3 grid or something

 - Write some SPH code
    - Generate particle list, use this to get each particle's neighbor list
    - Implement Algorithm

  - Optimize Serial code

  - Write parallel code

  - Optimize parallel code

TODO:
 - Vector class:
    DONE: Move class and methods to separate header/source file
    DONE: Add += operator
    DONE: Remove the 'vector constructor' ( = overloading is more natural)
    - Add *=, / (divide vector by scalar), * (scalar multiplication + friend) overloading
    - Move V member to private section
    - Improve operator overloading

 - Tensor Class:
    DONE: Define (), [], = (to arrays) for tensors.
    DONE: Move class and methods to a separate header/source file
    DONE: Add += operator overload.
    DONE: Add *=, / (divide by scalar), * (scalar multiplication + friend) overloading
    DONE: Add an inverse function
    - Test all new operators!
    - Move T member to private section
    - Clean up functions/reorganize

IDEAS:
 - Replace the Vector, Tensor classes with templates (need to look up how to do this)
    - This would allow me to change the data type stored in each tensor depending
    on the application... could be pretty useful (float vs double depending on
    required level of accuracy, etc.)
